const fs = require("fs-extra");
const axios = require("axios");
const path = require("path");

module.exports.config = {
  name: "announcement",
  version: "1.0.0",
  hasPermssion: 2,
  credits: "Mohammad Akash",
  description: "‡¶∏‡¶ï‡¶≤ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá Announcement ‡¶™‡¶æ‡¶†‡¶æ‡¶® (‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü, ‡¶á‡¶Æ‡ßá‡¶ú, ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì, ‡¶Ö‡¶°‡¶ø‡¶ì, ‡¶´‡¶æ‡¶á‡¶≤ ‡¶∏‡¶π)",
  commandCategory: "Admin",
  usages: "/announcement <‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü> ‡¶¨‡¶æ ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡¶ø‡¶®",
  cooldowns: 5,
};

const boldText = (text) => {
  const map = {
    "A":"ùêÄ","B":"ùêÅ","C":"ùêÇ","D":"ùêÉ","E":"ùêÑ","F":"ùêÖ","G":"ùêÜ","H":"ùêá",
    "I":"ùêà","J":"ùêâ","K":"ùêä","L":"ùêã","M":"ùêå","N":"ùêç","O":"ùêé","P":"ùêè",
    "Q":"ùêê","R":"ùêë","S":"ùêí","T":"ùêì","U":"ùêî","V":"ùêï","W":"ùêñ","X":"ùêó",
    "Y":"ùêò","Z":"ùêô","a":"ùêö","b":"ùêõ","c":"ùêú","d":"ùêù","e":"ùêû","f":"ùêü",
    "g":"ùê†","h":"ùê°","i":"ùê¢","j":"ùê£","k":"ùê§","l":"ùê•","m":"ùê¶","n":"ùêß",
    "o":"ùê®","p":"ùê©","q":"ùê™","r":"ùê´","s":"ùê¨","t":"ùê≠","u":"ùêÆ","v":"ùêØ",
    "w":"ùê∞","x":"ùê±","y":"ùê≤","z":"ùê≥"
  };
  return text.split("").map(c => map[c] || c).join("");
};

module.exports.run = async ({ api, event, args, Users }) => {
  try {
    const allThreads = global.data.allThreadID || [];
    const senderName = boldText(await Users.getNameUser(event.senderID));
    let successCount = 0;
    let failedCount = 0;

    const sendText = (text) => `‚ï≠‚îÄ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÄ‚ïÆ\n   üì¢ ùêÄùêßùêßùê®ùêÆùêßùêúùêûùêù By: ${senderName}\n‚ï∞‚îÄ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÄ‚ïØ\n\nüí¨ ${text}`;

    if (event.type === "message_reply") {
      const replyMsg = event.messageReply;
      const attachments = replyMsg.attachments || [];

      for (const attachment of attachments) {
        const fileUrl = attachment.url;
        const fileName = path.basename(fileUrl);
        const filePath = path.join(__dirname, `cache/${fileName}`);

        try {
          const response = await axios.get(fileUrl, { responseType: "arraybuffer" });
          await fs.writeFile(filePath, Buffer.from(response.data, "binary"));

          for (const threadID of allThreads) {
            if (threadID != event.threadID) {
              try {
                await api.sendMessage(
                  { body: sendText(replyMsg.body || args.join(" ")), attachment: fs.createReadStream(filePath) },
                  threadID
                );
                successCount++;
              } catch (error) {
                failedCount++;
                console.error(`Failed to send to ${threadID}:`, error);
              }
              await new Promise((resolve) => setTimeout(resolve, 1000));
            }
          }

          await fs.unlink(filePath);
        } catch (error) {
          console.error("File download/send error:", error);
          api.sendMessage("‚ùå ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!", event.threadID);
        }
      }
    } else if (args.length > 0) {
      const noticeText = args.join(" ");
      for (const threadID of allThreads) {
        if (threadID != event.threadID) {
          try {
            await api.sendMessage(sendText(noticeText), threadID);
            successCount++;
          } catch (error) {
            failedCount++;
            console.error(`Failed to send to ${threadID}:`, error);
          }
          await new Promise((resolve) => setTimeout(resolve, 500));
        }
      }
    } else {
      return api.sendMessage(
        "‚ÑπÔ∏è ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞:\n‚Ä¢ `/announcement <‡¶ü‡ßá‡¶ï‡ßç‡¶∏‡¶ü>`\n‚Ä¢ ‡¶¨‡¶æ ‡¶ï‡ßã‡¶®‡ßã ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá `/announcement` ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®",
        event.threadID
      );
    }

    api.sendMessage(`‚úÖ ${successCount} ‡¶ü‡¶ø ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá Announcement ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!\n‚ùå ${failedCount} ‡¶ü‡¶ø ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§`, event.threadID);
  } catch (error) {
    console.error("Global error:", error);
    api.sendMessage("‚ùå Announcement ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá!", event.threadID);
  }
};
